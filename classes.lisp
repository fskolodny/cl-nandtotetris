(in-package :nandtotetris)
(named-readtables:in-readtable rutils-readtable)

(defclass gate ()
  ((dictionary :initarg :dictionary :initform (make-hash-table))
   (ports :initarg :ports :initform (make-hash-table))
   )
  )
(defmethod port ((self gate) name &key (bitnumber 0))
  (let ((port (rtl:? @self.ports name))
	)
    (if (oddp (ash @port.val (- bitnumber))) 1 0)
    )
  )
(defmethod set-port ((self gate) name value &key (bitnumber 0))
  (let ((port (rtl:? @self.ports name))
	)
    (:= @port.val (+ (mod @port.val (ash 1 bitnumber)) (ash (ash @port.val (- (1+ bitnumber))) (1+ bitnumber)) (ash value bitnumber)))
    )
  )

(defclass nand-gate (gate)
  (
   )
  )

(defclass composite-gate (gate)
  ((parts  :initarg :parts :initform (list))
   )
  )

(defclass port ()
  ((val :accessor val :initarg :val)
   )
  )

(defclass executable ()
  (
   )
  )
(defclass simulation-step (executable)
  ((commands :initarg :commands)
   )
  )
(defclass tstfile (executable)
  ((steps :initarg :steps)
   (chip :initarg :chip)
   (output-file :initarg :output-file)
   (output-list :initarg :output-list)
   (compare-file :initarg :compare-file)
   )
  )
(defclass command (executable)
  ((context :initarg :context)
   )
  )
(defclass eval-command (command)
  (
   )
  )
(defclass file-command (command)
  ((file-name :initarg :file-name)
   )
  )
(defclass load-command (file-command)
  (
   )
  )
(defclass output-file-command (file-command)
  (
   )
  )
(defclass compare-to-command (file-command)
  (
   )
  )

(defclass output-list-command (command)
  (
   )
  )
(defclass output-command (command)
  (
   )
  )

(defgeneric evaluate (self))

(defmethod evaluate ((self nand-gate))
  (set-port self :out (nand (port self :a) (port self :b)))
  )

(defmethod evaluate ((self composite-gate))
  (dolist (gate @self.parts) (evaluate gate))
  )

(defmethod set-contexts ((self tstfile))
  (dolist (step @self.steps) (dolist (command @step.commands) (:= @command.context self)))
  )
(defgeneric execute (self &key &allow-other-keys))
(defmethod execute ((self simulation-step) &key)
  (dolist (command @self.commands) (execute command))
  )
(defmethod execute ((self tstfile) &key)
  (dolist (step @self.steps) (execute step))
  )
(defmethod execute ((self load-command) &key)
  (declare (ignore self))
  )
(defmethod execute ((self eval-command) &key)
  (evaluate @self.context.chip)
  )
